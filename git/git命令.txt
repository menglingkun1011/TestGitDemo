1.工作区 暂缓存区  分支


1.commit 之前的撤销

	a)未添加至暂存区的撤销(add之前)
	
	git status
	git checkout .
	
	
	b)已添加至暂存区的撤销(add之后)
	git reset HEAD:将已经添加至暂存区的文件,回退到未添加到暂存区的状态,
	
	

简单总结一下，其实就是--soft 、--mixed以及--hard是三个恢复等级。
使用--soft就仅仅将头指针恢复，已经add的缓存以及工作空间的所有东西都不变。
如果使用--mixed，就将头恢复掉，已经add的缓存也会丢失掉，工作空间的代码什么的是不变的。
如果使用--hard，那么一切就全都恢复了，头变，aad的缓存消失，代码什么的也恢复到以前状态。


解决新添加的忽略文件不起作用的方案：

git rm -r --cached .
git add .
git commit -m 'update .gitignore'




git rm与git rm --cached
当我们需要删除暂存区或分支上的文件, 同时工作区也不需要这个文件了, 可以使用

1 git rm file_path
2 git commit -m 'delete somefile'
3 git push
当我们需要删除暂存区或分支上的文件, 但本地又需要使用, 只是不希望这个文件被版本控制, 可以使用

git rm -r --cached  ./文件目录 //移除文件夹
git rm --cached file_path //移除单个文件
git commit -m 'delete remote somefile'
git push



git revert 命令意思是撤销某次提交。它会产生一个新的提交，虽然代码回退了，但是版本依然是向前的，所以，当你用revert回退之后，所有人pull之后，他们的代码也自动的回退了。 
但是，要注意以下几点：

revert 是撤销一次提交，所以后面的commit id是你需要回滚到的版本的前一次提交
使用git revert HEAD是撤销最近的一次提交，如果你最近一次提交是用revert命令产生的，那么你再执行一次，就相当于撤销了上次的撤销操作，换句话说，你连续执行两次revert HEAD命令，就跟没执行是一样的
使用git revert HEAD~1 表示撤销最近2次提交，这个数字是从0开始的，如果你之前撤销过产生了commi id，那么也会计算在内的。
如果使用 revert 撤销的不是最近一次提交，那么一定会有代码冲突，需要你合并代码，合并代码只需要把当前的代码全部去掉，保留之前版本的代码就可以了.





Git push
$ git push origin test:master         // 提交本地test分支作为远程的master分支
$ git push origin test:test              // 提交本地test分支作为远程的test分支


git pull
比如，取回origin主机的next分支，与本地的master分支合并，需要写成下面这样。
$ git pull origin next:master